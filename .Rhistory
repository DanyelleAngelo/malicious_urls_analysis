plotNeuralNetwork <- function(type_url, model) {
tiff(paste('neuralNetwork_', type_url, '.tiff', sep="", collapse=NULL), units="in", width=12, height=8, res=300, compression = 'lzw')
plot(model_spam, rep = "best", x.entry = NULL, x.out = NULL, radius = 0.30, arrow.length = 0.12, intercept = FALSE,
intercept.factor = 0.4, information = TRUE, information.pos = 0.1,
col.entry.synapse = "black", col.entry = "darkturquoise", col.hidden = "turquoise4", col.hidden.synapse = "black",
col.out = "aquamarine3", col.out.synapse = "black", col.intercept = "blue",
fontsize = 6, dimension = 50, show.weights = FALSE)
dev.off()
}
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.02)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
write.csv(results, file = "result_spam.csv")
print(results)
phishing <- function() {
phishing <- read_delim("dataset/Phishing_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
phishing <- phishing |> mutate(class=as_factor(class))
split_data     <- initial_split(phishing, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
# model_phishing <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
#                          data=training, hidden=c(9,6,3), linear.output = FALSE)
#
# plotNeuralNetwork("phishing", model_spam)
#
# results <- predict(model_phishing, training, training$class)
# write.csv(results, file = "result_phishing.csv")
# print(results)
}
phishing()
phising
phishing <- function() {
phishing <- read_delim("dataset/Phishing_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
phishing <- phishing |> mutate(class=as_factor(class))
split_data     <- initial_split(phishing, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
phishing
# model_phishing <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
#                          data=training, hidden=c(9,6,3), linear.output = FALSE)
#
# plotNeuralNetwork("phishing", model_spam)
#
# results <- predict(model_phishing, training, training$class)
# write.csv(results, file = "result_phishing.csv")
# print(results)
}
#phishing <- function() {
phishing <- read_delim("dataset/Phishing_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
phishing <- phishing |> mutate(class=as_factor(class))
split_data     <- initial_split(phishing, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
phishing
# model_phishing <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
#                          data=training, hidden=c(9,6,3), linear.output = FALSE)
#
# plotNeuralNetwork("phishing", model_spam)
#
# results <- predict(model_phishing, training, training$class)
# write.csv(results, file = "result_phishing.csv")
# print(results)
#}
glimpse(phishing)
#phishing <- function() {
phishing <- read_delim("dataset/Phishing_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
phishing <- phishing |> mutate(class=as_factor(class))
split_data     <- initial_split(phishing, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
phishing
model_phishing <- neuralnet(class~domain_token_count + tld + urlLen + domainlength + fileNameLen + pathurlRatio + NumberofDotsinURL +
Query_DigitCount + LongestPathTokenLength + delimeter_Domain + delimeter_path + SymbolCount_Domain + Entropy_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("phishing", model_phishing)
results <- predict(model_phishing, training, training$class)
write.csv(results, file = "result_phishing.csv")
print(results)
#}
#malware <- function() {
malware <- read_delim("dataset/Malware_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
malware <- malware |> mutate(class=as_factor(class))
split_data     <- initial_split(malware, prop=0.2)
training       <- training(split_data)
test           <- testing(split_data)
malware
# model_malware <- neuralnet(class~domain_token_count + tld + urlLen + domainlength + fileNameLen + pathurlRatio + NumberofDotsinURL +
#                                 Query_DigitCount + LongestPathTokenLength + delimeter_Domain + delimeter_path + SymbolCount_Domain + Entropy_Domain,
#                          data=training, hidden=c(9,6,3), linear.output = FALSE)
#
# plotNeuralNetwork("malware", model_malware)
#
# results <- predict(model_malware, test, test$class)
# write.csv(results, file = "result_malware.csv")
# print(results)
#}
malware
#malware <- function() {
malware <- read_delim("dataset/Malware_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
malware <- malware |> mutate(class=as_factor(class))
split_data     <- initial_split(malware, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
model_malware <- neuralnet(class~domain_token_count + tld + urlLen + argDomanRatio + NumberofDotsinURL + NumberRate_Domain +
SymbolCount_Domain + Entropy_Domain + Entropy_Extension,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("malware", model_malware)
results <- predict(model_malware, test, test$class)
write.csv(results, file = "result_malware.csv")
print(results)
#}
#malware <- function() {
malware <- read_delim("dataset/Malware_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
malware <- malware |> mutate(class=as_factor(class))
split_data     <- initial_split(malware, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
model_malware <- neuralnet(class ~ . ,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("malware", model_malware)
results <- predict(model_malware, test, test$class)
write.csv(results, file = "result_malware.csv")
print(results)
#}
malware
glimpse(malware)
#malware <- function() {
malware <- read_delim("dataset/Malware_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
malware <- malware |> mutate(class=as_factor(class))
split_data     <- initial_split(malware, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
model_malware <- neuralnet(class~domain_token_count + tld + urlLen + argDomanRatio + NumberofDotsinURL + NumberRate_Domain +
SymbolCount_Domain + Entropy_Domain + Entropy_Extension,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("malware", model_malware)
results <- predict(model_malware, test, test$class)
#malware <- function() {
malware <- read_delim("dataset/Malware_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
malware <- malware |> mutate(class=as_factor(class))
split_data     <- initial_split(malware, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
model_malware <- neuralnet(class~domain_token_count + tld + urlLen + argDomanRatio + NumberofDotsinURL + NumberRate_Domain +
SymbolCount_Domain + Entropy_Domain + Entropy_Extension,
data=training, hidden=c(9,6,3), linear.output = FALSE)
#malware <- function() {
malware <- read_delim("dataset/Malware_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
malware <- malware |> mutate(class=as_factor(class))
split_data     <- initial_split(malware, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
model_malware <- neuralnet(class~domain_token_count + tld + urlLen + argDomanRatio + NumberofDotsinURL + NumberRate_Domain +
SymbolCount_Domain + Entropy_Domain + Entropy_Extension,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("malware", model_malware)
results <- predict(model_malware, training, training$class)
write.csv(results, file = "result_malware.csv")
print(results)
#}
#defacement <- function() {
defacement <- read_delim("dataset/Defacement_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
defacement <- defacement |> mutate(class=as_factor(class))
glimpse(defacement)
#defacement <- function() {
defacement <- read_delim("dataset/Defacement_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
defacement <- defacement |> mutate(class=as_factor(class))
split_data     <- initial_split(defacement, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
model_defacement <- neuralnet(class~domain_token_count + avgpathtokenlen + tld + ArgUrlRatio + NumberofDotsinURL +
Arguments_LongestWordLength + spcharUrl + delimeter_Domain + delimeter_path +
NumberRate_DirectoryName + SymbolCount_Domain + Entropy_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("defacement", model_defacement)
results <- predict(model_malware, training, training$class)
#defacement <- function() {
defacement <- read_delim("dataset/Defacement_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
defacement <- defacement |> mutate(class=as_factor(class))
split_data     <- initial_split(defacement, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
model_defacement <- neuralnet(class~domain_token_count + avgpathtokenlen + tld + ArgUrlRatio + NumberofDotsinURL +
Arguments_LongestWordLength + spcharUrl + delimeter_Domain + delimeter_path +
NumberRate_DirectoryName + SymbolCount_Domain + Entropy_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("defacement", model_defacement)
results <- predict(model_defacement, training, training$class)
write.csv(results, file = "result_defacement.csv")
print(results)
#}
All_Infogain.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
multiclass <- read_delim("dataset/All_Infogain.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
multiclass <- multiclass |> mutate(class=as_factor(class))
glimpse(multiclass)
#multiclass <- function() {
multiclass <- read_delim("dataset/All_Infogain.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
multiclass <- multiclass |> mutate(class=as_factor(class))
split_data     <- initial_split(multiclass, prop=0.02)
training       <- training(split_data)
test           <- testing(split_data)
model_multiclass <- neuralnet(class~avgpathtokenlen + pathurlRatio + ArgUrlRatio + argDomanRatio + domainUrlRatio +
pathDomainRatio + argPathRatio + CharacterContinuityRate + NumberRate_URL + NumberRate_FileName +
NumberRate_AfterPath + Entropy_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
#multiclass <- function() {
multiclass <- read_delim("dataset/All_Infogain.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
multiclass <- multiclass |> mutate(class=as_factor(class))
split_data     <- initial_split(multiclass, prop=0.002)
training       <- training(split_data)
test           <- testing(split_data)
model_multiclass <- neuralnet(class~avgpathtokenlen + pathurlRatio + ArgUrlRatio + argDomanRatio + domainUrlRatio +
pathDomainRatio + argPathRatio + CharacterContinuityRate + NumberRate_URL + NumberRate_FileName +
NumberRate_AfterPath + Entropy_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("multiclass", model_multiclass)
results <- predict(model_multiclass, training, training$class)
write.csv(results, file = "result_multiclass.csv")
print(results)
#}
library(tidymodels)
library(tidyverse)
library(dplyr)
library(scales) #para squish
library(neuralnet)
library(tidymodels)
library(tidyverse)
library(dplyr)
library(scales) #para squish
library(neuralnet)
draw_boxplot <- function(data){
data |>
pivot_longer(1:ncol(data)-1, names_to="attributes") |>
ggplot(aes(attributes, value, fill=attributes)) +
geom_boxplot()
}
preparing_data <- function(data) {
data <- data |> mutate(Species=as_factor(Species) ) #Transforma coluna alvo em dados categóricos
data <- data |> mutate(across(Sepal.Width, ~squish(.x, quantile(.x, c(0.05, 0.95))))) #remove outliers
data <- data |> mutate(across(1:ncol(data)-1, scale)) #Coloca todos os dados em uma mesma escala
return(data)
}
performance_evaluation <- function(model, test_data, y){
prediction  <- data.frame(neuralnet::compute(model, data.frame(test_data[,-ncol(test_data)]))$net.result) #Compute: prevê as espécies, ele prevê a possibilidade de cada neurônio de saída
labels      <- c(unique(y))
pred_laabel <- data.frame(max.col(prediction)) |>  #Captura como resposta o neurônio com a saída mais alta
mutate(prediction=labels[max.col.prediction.]) |>
select(2) |>
unlist()
results     <- table(y, pred_laabel)
accuracy    <- (sum(diag(results)) / sum(results))*100
precision   <- (diag(results) / rowSums(results))*100
recall      <- ((diag(results) / colSums(results)))*100
df          <- data.frame(accuracy, precision,recall)
print(results)
return(df)
}
plotNeuralNetwork <- function(type_url, model) {
tiff(paste('neuralNetwork_', type_url, '.tiff', sep="", collapse=NULL), units="in", width=12, height=8, res=300, compression = 'lzw')
plot(model_spam, rep = "best", x.entry = NULL, x.out = NULL, radius = 0.30, arrow.length = 0.12, intercept = FALSE,
intercept.factor = 0.4, information = TRUE, information.pos = 0.1,
col.entry.synapse = "black", col.entry = "darkturquoise", col.hidden = "turquoise4", col.hidden.synapse = "black",
col.out = "aquamarine3", col.out.synapse = "black", col.intercept = "blue",
fontsize = 6, dimension = 50, show.weights = FALSE)
dev.off()
}
spam <- function() {
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.8)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, test, test$class)
write.csv(results, file = "result_spam.csv")
print(results)
}
phishing <- function() {
phishing <- read_delim("dataset/Phishing_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
phishing <- phishing |> mutate(class=as_factor(class))
split_data     <- initial_split(phishing, prop=0.8)
training       <- training(split_data)
test           <- testing(split_data)
model_phishing <- neuralnet(class~domain_token_count + tld + urlLen + domainlength + fileNameLen + pathurlRatio + NumberofDotsinURL +
Query_DigitCount + LongestPathTokenLength + delimeter_Domain + delimeter_path + SymbolCount_Domain + Entropy_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("phishing", model_phishing)
results <- predict(model_phishing, test, test$class)
write.csv(results, file = "result_phishing.csv")
print(results)
}
malware <- function() {
malware <- read_delim("dataset/Malware_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
malware <- malware |> mutate(class=as_factor(class))
split_data     <- initial_split(malware, prop=0.8)
training       <- training(split_data)
test           <- testing(split_data)
model_malware <- neuralnet(class~domain_token_count + tld + urlLen + argDomanRatio + NumberofDotsinURL + NumberRate_Domain +
SymbolCount_Domain + Entropy_Domain + Entropy_Extension,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("malware", model_malware)
results <- predict(model_malware, test, test$class)
write.csv(results, file = "result_malware.csv")
print(results)
}
defacement <- function() {
defacement <- read_delim("dataset/Defacement_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
defacement <- defacement |> mutate(class=as_factor(class))
split_data     <- initial_split(defacement, prop=0.8)
training       <- training(split_data)
test           <- testing(split_data)
model_defacement <- neuralnet(class~domain_token_count + avgpathtokenlen + tld + ArgUrlRatio + NumberofDotsinURL +
Arguments_LongestWordLength + spcharUrl + delimeter_Domain + delimeter_path +
NumberRate_DirectoryName + SymbolCount_Domain + Entropy_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("defacement", model_defacement)
results <- predict(model_defacement, test, test$class)
write.csv(results, file = "result_defacement.csv")
print(results)
}
multiclass <- function() {
multiclass <- read_delim("dataset/All_Infogain.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
multiclass <- multiclass |> mutate(class=as_factor(class))
split_data     <- initial_split(multiclass, prop=0.8)
training       <- training(split_data)
test           <- testing(split_data)
model_multiclass <- neuralnet(class~avgpathtokenlen + pathurlRatio + ArgUrlRatio + argDomanRatio + domainUrlRatio +
pathDomainRatio + argPathRatio + CharacterContinuityRate + NumberRate_URL + NumberRate_FileName +
NumberRate_AfterPath + Entropy_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("multiclass", model_multiclass)
results <- predict(model_multiclass, test, test$class)
write.csv(results, file = "result_multiclass.csv")
print(results)
}
spam <- function() {
start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.02)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
write.csv(results, file = "result_spam.csv")
print(results)
end_time <- Sys.time()
end_time - start_time
}
spam()
spam <- function() {
start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.02)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
write.csv(results, file = "result_spam.csv")
print(results)
end_time <- Sys.time()
end_time - start_time
}
spam()
#spam <- function() {
start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.02)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
#spam <- function() {
start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.2)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
spam <- function() {
start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.1)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
write.csv(results, file = "result_spam.csv")
print(results)
end_time <- Sys.time()
end_time - start_time
}
spam()
#spam <- function() {
start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.1)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
#spam <- function() {
start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.2)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
library(tidymodels)
library(tidyverse)
library(dplyr)
library(scales) #para squish
library(neuralnet)
performance_evaluation <- function(model, test_data, y){
prediction  <- data.frame(neuralnet::compute(model, data.frame(test_data[,-ncol(test_data)]))$net.result) #Compute: prevê as espécies, ele prevê a possibilidade de cada neurônio de saída
labels      <- c(unique(y))
pred_laabel <- data.frame(max.col(prediction)) |>  #Captura como resposta o neurônio com a saída mais alta
mutate(prediction=labels[max.col.prediction.]) |>
select(2) |>
unlist()
results     <- table(y, pred_laabel)
accuracy    <- (sum(diag(results)) / sum(results))*100
precision   <- (diag(results) / rowSums(results))*100
recall      <- ((diag(results) / colSums(results)))*100
df          <- data.frame(accuracy, precision,recall)
print(results)
return(df)
}
plotNeuralNetwork <- function(type_url, model) {
tiff(paste('neuralNetwork_', type_url, '.tiff', sep="", collapse=NULL), units="in", width=12, height=8, res=300, compression = 'lzw')
plot(model_spam, rep = "best", x.entry = NULL, x.out = NULL, radius = 0.30, arrow.length = 0.12, intercept = FALSE,
intercept.factor = 0.4, information = TRUE, information.pos = 0.1,
col.entry.synapse = "black", col.entry = "darkturquoise", col.hidden = "turquoise4", col.hidden.synapse = "black",
col.out = "aquamarine3", col.out.synapse = "black", col.intercept = "blue",
fontsize = 6, dimension = 50, show.weights = FALSE)
dev.off()
}
#spam <- function() {
start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.2)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
spam
#spam <- function() {
#start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.2)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
#spam <- function() {
#start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.02)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
#spam <- function() {
#start_time <- Sys.time()
spam <- read_delim("dataset/Spam_BestFirst.csv", col_types = cols(), show_col_types = TRUE,  delim=",")
spam <- spam |> mutate(class=as_factor(class))
split_data  <- initial_split(spam, prop=0.02)
training    <- training(split_data)
test        <- testing(split_data)
model_spam  <- neuralnet(class~domain_token_count + tld + ldl_getArg + NumberofDotsinURL + delimeter_path + SymbolCount_Domain,
data=training, hidden=c(9,6,3), linear.output = FALSE)
plotNeuralNetwork("spam", model_spam)
results <- predict(model_spam, training, training$class)
View(spam)
View(spam)
training
results <- predict(model_spam, training, training$class)
